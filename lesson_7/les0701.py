"""
1. Отсортируйте по убыванию методом пузырька одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран исходный и отсортированный массивы.
Примечания:
a. алгоритм сортировки должен быть в виде функции, которая принимает на вход массив данных,
b. постарайтесь сделать алгоритм умнее, но помните, что у вас должна остаться сортировка пузырьком.
Улучшенные версии сортировки, например, расчёской, шейкерная и другие в зачёт не идут.
"""
from random import randint


# как на уроке
def bubble_sort(array):
    n = 1
    while n < len(array):
        for j in range(len(array) - n):
            if array[j] < array[j + 1]:
                array[j], array[j + 1] = array[j + 1], array[j]
        n += 1


# while заменен на for
def bubble_sort_other(array):
    # идем по списку справа налево
    for i in range(len(array), 0, -1):
        change_counter = 0
        # идем с начала по списку только несортированных элементов, отсортированные в конце
        for j in range(i - 1):
            if array[j] < array[j + 1]:
                array[j], array[j + 1] = array[j + 1], array[j]
                change_counter += 1
        # улучшение: если после прохода по элементам обмена не было (change_counter == 0),
        # то завершить работу функции, так как массив уже отсортирован,
        # это уменьшает количество проходов
        if change_counter == 0:
            break
        # print(f'{array}, {len(array) - i + 1} -й проход')


size = 10
array = [randint(-100, 99) for i in range(size)]
print(f'{array} - несортированный список')

bubble_sort_other(array)
print(f'{array} - сортированный список')
